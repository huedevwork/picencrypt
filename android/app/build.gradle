plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    signingConfigs {
        debug {
            storePassword keystoreProperties['storePassword']
        }

        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    namespace = "com.hue.picencrypt"

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    compileSdkVersion 36
    buildToolsVersion '36.0.0'
    compileSdk 36
    defaultConfig {
        applicationId = "com.hue.picencrypt"
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.release
            versionNameSuffix "-debug"
        }

        profile {
            // Based on debug configuration
            initWith debug
            // When there is no signature specified, fall back to debug or release
            matchingFallbacks = ["debug", "release"]
        }

        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.release
        }
    }

    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            universalApk true
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { apkVariantOutput ->
            def appName = "picencrypt"
            def versionName = variant.versionName
            def abiName = apkVariantOutput.getFilter(com.android.build.OutputFile.ABI)
            if (abiName == null) {
                abiName = "universal"
            }
            def buildType = variant.buildType.name
            apkVariantOutput.outputFileName = "${appName}-${versionName}-${buildType}-${abiName}.apk"
        }
    }
}

flutter {
    source = "../.."
}
